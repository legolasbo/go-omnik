package omnikreader

import (
	"encoding/hex"
	"strconv"
	"time"
)

// InverterMsg provides an easy way to turn an omnik message into actual values.
type InverterMsg struct {
	Data []byte
}

// Sample is an inverter sample DTO.
type Sample struct {
	Timestamp    string
	Date 		 string
	Time		 string
	Temperature  float32
	EnergyTotal  float32
	EnergyToday  float32
	EnergyHours  int
	Power        float32
	PvVoltage1   float32
	PvVoltage2   float32
	PvVoltage3   float32
	PvCurrent1   float32
	PvCurrent2   float32
	PvCurrent3   float32
	ACVoltage1   float32
	ACVoltage2   float32
	ACVoltage3   float32
	ACCurrent1   float32
	ACCurrent2   float32
	ACCurrent3   float32
	ACFrequency1 float32
	ACFrequency2 float32
	ACFrequency3 float32
	ACPower1     float32
	ACPower2     float32
	ACPower3     float32
}

// GetSample retrieves a sample ready for use.
func (msg *InverterMsg) GetSample(currentTime time.Time) Sample {
	return Sample{
		Timestamp: currentTime.Format("2006-01-02 15:04:05"),
		Date: currentTime.Format("2006-01-02"),
		Time: currentTime.Format("15:04:05"),
		Temperature: msg.Temperature(),
		EnergyTotal: msg.EnergyTotal(),
		EnergyToday: msg.EnergyToday(),
		EnergyHours: msg.HoursGenerated(),
		Power: msg.PowerOutput(),
		PvVoltage1: msg.PvVoltage(1),
		PvVoltage2: msg.PvVoltage(2),
		PvVoltage3: msg.PvVoltage(3),
		PvCurrent1: msg.PvCurrent(1),
		PvCurrent2: msg.PvCurrent(2),
		PvCurrent3: msg.PvCurrent(3),
		ACVoltage1: msg.ACVoltage(1),
		ACVoltage2: msg.ACVoltage(2),
		ACVoltage3: msg.ACVoltage(3),
		ACCurrent1: msg.ACCurrent(1),
		ACCurrent2: msg.ACCurrent(2),
		ACCurrent3: msg.ACCurrent(3),
		ACFrequency1: msg.ACFrequency(1),
		ACFrequency2: msg.ACFrequency(2),
		ACFrequency3: msg.ACFrequency(3),
		ACPower1: msg.ACPower(1),
		ACPower2: msg.ACPower(2),
		ACPower3: msg.ACPower(3),
	}
}

// TimeObject retrieves a time object.
func (s *Sample) TimeObject() (time.Time, error) {
	return time.Parse("2006-01-02 15:04:05", s.Timestamp)
}

func (msg *InverterMsg) getInt(begin int8, numBytes int8) int64 {
	if int(begin+numBytes) > len(msg.Data) {
		return 0
	}
	byteVal := msg.Data[begin : begin+numBytes]
	hexVal := hex.EncodeToString(byteVal)
	intVal, _ := strconv.ParseInt(hexVal, 16, 64)

	return intVal
}

func (msg *InverterMsg) getShort(begin int8, divider int8) float32 {
	return float32(msg.getInt(begin, 2)) / float32(divider)
}

func (msg *InverterMsg) getLong(begin int8, divider int8) float32 {
	return float32(msg.getInt(begin, 4)) / float32(divider)
}

func (msg *InverterMsg) getString(begin int8, end int8) string {
	return string(msg.Data[begin:end])
}

// Temperature recorded by the inverter.
func (msg *InverterMsg) Temperature() float32 {
	return msg.getShort(31, 10)
}

// ID of the inverter.
func (msg *InverterMsg) ID() string {
	return msg.getString(15, 31)
}

// EnergyTotal retrieves the total energy generated by inverter in KWH.
func (msg *InverterMsg) EnergyTotal() float32 {
	return msg.getLong(71, 10)
}

// EnergyToday retrieves the energy generated by inverter today in KWH.
func (msg *InverterMsg) EnergyToday() float32 {
	return msg.getShort(69, 100)
}

// HoursGenerated retrieves the number of hours the inverter generated electricity.
func (msg *InverterMsg) HoursGenerated() int {
	return int(msg.getLong(75, 1))
}

// PowerOutput retrieves the current power output in Watts.
func (msg *InverterMsg) PowerOutput() float32 {
	return msg.getShort(59, 1)
}

// PvVoltage retrieves the voltage a given PC channel is currently generating.
func (msg *InverterMsg) PvVoltage(channel int8) float32 {
	if channel < 0 || channel > 3 {
		channel = 1
	}

	num := 33 + (channel-1)*2
	return msg.getShort(num, 10)
}

// PvCurrent retrieves the current a given PC channel is currently generating in amps.
func (msg *InverterMsg) PvCurrent(channel int8) float32 {
	if channel < 0 || channel > 3 {
		channel = 1
	}

	num := 39 + (channel-1)*2
	return msg.getShort(num, 10)
}

// ACCurrent retrieves the current a given AC channel is currently outputting in amps.
func (msg *InverterMsg) ACCurrent(channel int8) float32 {
	if channel < 0 || channel > 3 {
		channel = 1
	}

	num := 45 + (channel-1)*2
	return msg.getShort(num, 10)
}

// ACVoltage retrieves the voltage a given AC channel is currently outputting.
func (msg *InverterMsg) ACVoltage(channel int8) float32 {
	if channel < 0 || channel > 3 {
		channel = 1
	}

	num := 51 + (channel-1)*2
	return msg.getShort(num, 10)
}

// ACFrequency retrieves the current frequency of a given channel.
func (msg *InverterMsg) ACFrequency(channel int8) float32 {
	if channel < 0 || channel > 3 {
		channel = 1
	}

	num := 57 + (channel-1)*4
	return msg.getShort(num, 100)
}

// ACPower retrieves the output of the given AC output channel.
func (msg *InverterMsg) ACPower(channel int8) float32 {
	if channel < 0 || channel > 3 {
		channel = 1
	}

	num := 59 + (channel-1)*4
	return msg.getShort(num, 1)
}
